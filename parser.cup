import java_cup.runtime.*;

/*
* Ops
*/
terminal TIMES;
terminal PLUS;
terminal PLUSPLUS;
terminal MINUS;
terminal MINUSMINUS;
terminal DIVIDE;
terminal SEMI;
terminal COLON;
terminal COMMA;
terminal LEFT_PAREN;
terminal RT_PAREN;
terminal LEFT_BRKT;
terminal RT_BRKT;
terminal LEFT_CURL;
terminal RT_CURL;
terminal EQ;
terminal EQEQ;
terminal GTR;
terminal LESS;
terminal LESS_EQ;
terminal GTR_EQ;
terminal NOT_EQ;
terminal QUOTE;
terminal OR;
terminal AND;
terminal QUES;
terminal BNOT;

/*
* Other
*/
terminal IF;
terminal WHILE;
terminal FI;
terminal ELSE;
terminal FINAL;
terminal VOID;
terminal CLASS;
terminal PRINT;
terminal RETURN;
terminal PRINTLINE;
terminal READ;

/*
* Types
*/
terminal INT;
terminal FLOAT;
terminal CHAR;
terminal BOOL;

/**
* Literals
* terminal INTLIT;
* terminal STRINGLIT;
* terminal CHARLIT;
* terminal FLOATLIT;
* terminal IDENT;
*/
terminal TRUE;
terminal FALSE;

/**
* Terminals that require use to build an AST for
*/
terminal String INTLIT;
terminal String FLOATLIT;
terminal String CHARLIT;
terminal String STRINGLIT;
terminal String IDENT;

/**
 * The following two lines define a dummy non-terminal and grammar rule.  CUP
 * needs at least one rule to run without errors.
 */


non terminal ProgramAST             prog;
non terminal MemberdeclsAST         memlist;
non terminal FielddeclsAST          fieldlist;
non terminal FieldAST               field;

non terminal MethoddeclsAST         methods;
non terminal MethodAST              meth;

non terminal ArgdeclsAST            arglist;
non terminal ArgAST                 arg;

non terminal TypeAST                type;

non terminal ReturntypeAST          returntype;

non terminal ParameterArgsAST       paramargs;

non terminal ReadlistAST            readlist;

non terminal PrintlistAST           printlist;

/* If-else stuff */
non terminal StatementlistAST       statelist;
non terminal StatementAST           statement;
non terminal OpenstateAST           open;
non terminal ClosedstateAST         closed;
non terminal SimplestateAST         simple;

/* Optional stuff */
non terminal OptionalexprAST        optexpr;
non terminal OptionalsemiAST        optsemi;
non terminal OptionalfinalAST       optfin;
non terminal OptionalcommaAST       optcomma;


/* All the dang expression */
non terminal ExprAST                expr;
non terminal CastexprAST            castexpr;
non terminal FunctionexprAST        funcexpr;
non terminal SingleexprAST          singleexpr;
non terminal UnaryexprAST           unaryexpr;
non terminal BinaryexprAST          binaryexpr;
non terminal TernaryexprAST         ternaryexpr;
non terminal SingleParenedExprAST   parendexpr;


non terminal LiteralAST             literal;

non terminal BinaryOp               binop;
non terminal IntlitAST              int;
non terminal CharlitAST             char;
non terminal FloatlitAST            float;
non terminal StringlitAST           string;
non terminal IdentAST               ident;

non terminal NameAST                name;

precedence left OR;
precedence left AND;
precedence left EQEQ, NOT_EQ;
precedence left GTR, GTR_EQ, LESS, LESS_EQ;
precedence left MINUS, PLUS;
precedence left TIMES, DIVIDE;
precedence left MINUSMINUS, PLUSPLUS;

start with prog;

prog                    ::= CLASS ident:i LEFT_CURL memlist:m RT_CURL
                            {: RESULT = new ProgramAST(i, m); :}
                        ;

memlist                 ::= fieldlist:i methods:m
                            {: RESULT = new MemberdeclsAST(i, m); :}
                        ;

fieldlist               ::= fieldlist:fs FINAL type:t ident:i  field:f
                            {: RESULT = new FielddeclsAST(new OptionalfinalAST(true), t, i, f, fs); :}
                        |   fieldlist:fs type:t ident:i  field:f
                            {: RESULT = new FielddeclsAST(new OptionalfinalAST(false), t, i, f, fs); :}
                        |   {: RESULT = new FielddeclsAST(); :}
                        ;

field                   ::= optexpr:e SEMI
                        {: RESULT = new FieldExprAST(e); :}
                        |   LEFT_BRKT int:i RT_BRKT SEMI
                            {: RESULT = new FieldArrayAST(i); :}
                        ;

methods                 ::= type:t ident:i meth:m methods:ml
                            {: RESULT = new MethoddeclsAST(new ReturntypeAST(t), i, m, ml); :}
                        |   VOID ident:i meth:m methods:ml
                            {: RESULT = new MethoddeclsAST(new ReturntypeAST(true), i, m, ml); :}
                        |   {: RESULT = new MethoddeclsAST(); :}
                        ;

meth                    ::= LEFT_PAREN  arglist:a RT_PAREN LEFT_CURL fieldlist:fl statelist:sl RT_CURL optsemi:semi
                            {: RESULT = new MethodAST(a,fl, sl, semi); :}
                        ;

arglist                 ::= type:t ident:i optcomma:c arglist:al
                            {: RESULT = new ArgdeclsAST(new ArgAST(t,i), al, c); :}
                        |   type:t ident:i LEFT_BRKT RT_BRKT optcomma:c arglist:al
                            {: RESULT = new ArgdeclsAST(new ArgarrayAST(t,i), al, c); :}
                        |   {: RESULT = new ArgdeclsAST(); :}
                        ;

statelist               ::= statement:s statelist:sl
                            {: RESULT = new StatementlistAST(s, sl); :}
                        |   {: RESULT = new StatementlistAST(); :}
                        ;

statement               ::= open:o
                            {: RESULT = new StatementAST(o); :}
                        |   closed:c
                            {: RESULT = new StatementAST(c); :}
                        ;


open                    ::= IF LEFT_PAREN expr:e RT_PAREN statement:s
                            {: RESULT = new IfOpenstateAST(e, s); :}
                        |   IF LEFT_PAREN expr:e RT_PAREN closed:c ELSE open:o
                            {: RESULT = new IfOpenStateCloseOpenAST(e, c, o); :}
                        |   WHILE LEFT_PAREN expr:e RT_PAREN open:o
                            {: RESULT = new WhileopenstateAST(e, o); :}
                        ;

closed                  ::= simple:s
                            {: RESULT = new ClosedstateAST(s); :}
                        |   IF LEFT_PAREN expr:e RT_PAREN closed:c ELSE closed:c2
                            {: RESULT = new IfClosedAST(e, c, c2); :}
                        |   WHILE LEFT_PAREN expr:e RT_PAREN closed:c
                            {: RESULT = new WhileclosedAST(e,c); :}
                        ;
simple                  ::= name:n EQ expr:e SEMI
                            {: RESULT = new SimpleAssignAST(n, e); :}
                        |   READ LEFT_PAREN readlist:r RT_PAREN SEMI
                            {: RESULT = new SimpleReadlistAST(r); :}
                        |   PRINT LEFT_PAREN printlist:p RT_PAREN SEMI
                            {: RESULT = new SimplePrintlistAST(p); :}
                        |   PRINTLINE LEFT_PAREN RT_PAREN SEMI
                            {: RESULT = new SimplePrintlineAST(); :}
                        |   LEFT_CURL fieldlist:f statelist:sl RT_CURL optsemi:s
                            {: RESULT = new SimpleBodyAST(f, sl, s); :}
                        |   ident:i LEFT_PAREN RT_PAREN SEMI
                            {: RESULT = new SimpleFunctionAST(i); :}
                        |   ident:i LEFT_PAREN paramargs:p RT_PAREN SEMI
                            {: RESULT = new SimpleFunctionArgsAST(i, p); :}
                        |   RETURN SEMI
                            {: RESULT = new ReturnsimpleAST(); :}
                        |   RETURN expr:e SEMI
                            {: RESULT = new ReturnSimpleExprAST(e); :}
                        |   name:n PLUSPLUS SEMI
                            {: RESULT = new SimpleNameAST(n,true); :}
                        |   name:n MINUSMINUS SEMI
                            {: RESULT = new SimpleNameAST(n,false); :}
                        ;

paramargs               ::= expr:e COMMA paramargs:p
                            {: RESULT = new ParameterArgsAST(e,p); :}
                        |   expr:e
                            {: RESULT = new ParameterArgsAST(e); :}
                        ;

readlist                ::= name:n COMMA readlist:r
                            {: RESULT = new ReadlistAST(n, r); :}
                        |   name:n
                            {: RESULT = new ReadlistAST(n); :}
                        ;

printlist               ::= expr:n COMMA printlist:p
                            {: RESULT = new PrintlistAST(n, p); :}
                        |   expr:n
                            {: RESULT = new PrintlistAST(n); :}
                        ;

returntype              ::= type:t
                            {: RESULT = new ReturntypeAST(t); :}

                        |   VOID
                            {: RESULT = new ReturntypeAST(true); :}
                        ;

optexpr                 ::= EQ expr:e
                            {: RESULT = new OptionalexprAST(e); :}
                        |   {: RESULT = new OptionalexprAST(); :}
                        ;

optsemi                 ::= SEMI
                            {: RESULT = new OptionalsemiAST(true); :}
                        |   {: RESULT = new OptionalsemiAST(false); :}
                        ;

optcomma                ::= COMMA
                            {: RESULT = new OptionalcommaAST(true); :}
                        |   {: RESULT = new OptionalcommaAST(false); :}
                        ;

type                    ::= INT
                            {: RESULT = new TypeAST("int"); :}
                        | FLOAT
                            {: RESULT = new TypeAST("float"); :}
                        | BOOL
                            {: RESULT = new TypeAST("bool"); :}
                        | CHAR
                            {: RESULT = new TypeAST("char"); :}
                        ;

name                    ::= ident:i
                            {: RESULT = new NameAST(i); :}
                        |   ident:i LEFT_BRKT expr:e RT_BRKT
                            {: RESULT = new NamearrayAST(i, e); :}
                        ;

expr                    ::= funcexpr:f
                            {: RESULT = f; :}
                        | castexpr:f
                            {: RESULT = f; :}
                        | singleexpr:f
                            {: RESULT = f; :}
                        | parendexpr:f
                            {: RESULT = f; :}
                        | unaryexpr:f
                            {: RESULT = f; :}
                        | binaryexpr:f
                            {: RESULT = f; :}
                        | ternaryexpr:f
                            {: RESULT = f; :}
                        ;

castexpr                ::= LEFT_PAREN type:t RT_PAREN expr:e
                            {: RESULT = new CastexprAST(t, e); :}
                        ;

/*
* TODO THIS NEEDS ident:a swapped with args
*/

funcexpr                ::= ident:i LEFT_PAREN RT_PAREN
                            {: RESULT = new FunctionexprAST(i); :}
                        |   ident:i LEFT_PAREN paramargs:a RT_PAREN
                            {: RESULT = new FunctionexprAST(i, a); :}
                        ;

/*
* Not sure if (expr) works well here
*/

singleexpr              ::= name:n
                            {: RESULT = new SingleexprAST(n); :}
                        | int:n
                            {: RESULT = new SingleexprAST(n); :}
                        | float:n
                            {: RESULT = new SingleexprAST(n); :}
                        | string:n
                            {: RESULT = new SingleexprAST(n); :}
                        | char:n
                            {: RESULT = new SingleexprAST(n); :}
                        | TRUE
                            {: RESULT = new SingleexprAST(new BooleanAST(true)); :}
                        | FALSE
                            {: RESULT = new SingleexprAST(new BooleanAST(false)); :}
                        ;

parendexpr              ::= LEFT_PAREN expr:e RT_PAREN
                            {: RESULT = new SingleParenedExprAST(e); :}
                        ;


unaryexpr               ::= BNOT expr:e
                            {: RESULT = new UnaryexprAST("~", e); :}
                        | MINUS expr:e
                            {: RESULT = new UnaryexprAST("-", e); :}
                        | PLUS expr:e
                            {: RESULT = new UnaryexprAST("+", e); :}
                        ;

binaryexpr              ::= expr:e1 binop:b expr:e2
                            {: RESULT = new BinaryexprAST(e1, b, e2); :}
                        ;

ternaryexpr             ::= LEFT_PAREN expr:e1 QUES expr:e2 COLON expr:e3 RT_PAREN
                            {: RESULT = new TernaryexprAST(e1, e2, e3); :}
                        ;

binop                   ::= TIMES
                            {: RESULT = new BinaryOp("*"); :}
                        | DIVIDE
                            {: RESULT = new BinaryOp("/"); :}
                        | PLUS
                            {: RESULT = new BinaryOp("+"); :}
                        | MINUS
                            {: RESULT = new BinaryOp("-"); :}
                        | LESS
                            {: RESULT = new BinaryOp("<"); :}
                        | GTR
                            {: RESULT = new BinaryOp(">"); :}
                        | LESS_EQ
                            {: RESULT = new BinaryOp("<="); :}
                        | GTR_EQ
                            {: RESULT = new BinaryOp(">="); :}
                        | EQEQ
                            {: RESULT = new BinaryOp("=="); :}
                        | NOT_EQ
                            {: RESULT = new BinaryOp("<>"); :}
                        | OR
                            {: RESULT = new BinaryOp("||"); :}
                        | AND
                            {: RESULT = new BinaryOp("&&"); :}
                        ;


int                     ::= INTLIT:i
                            {: RESULT = new IntlitAST(i); :}
                        ;

float                   ::= FLOATLIT:i
                            {: RESULT = new FloatlitAST(i); :}
                        ;

char                    ::= CHARLIT:i
                            {: RESULT = new CharlitAST(i); :}
                        ;

string                  ::= STRINGLIT:i
                            {: RESULT = new StringlitAST(i); :}
                        ;

ident                   ::= IDENT:i
                            {: RESULT = new IdentAST(i); :}
                        ;
